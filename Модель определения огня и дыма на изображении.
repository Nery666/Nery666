!pip install -q yadisk

import yadisk, zipfile, os, shutil
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models
from PIL import Image

# === ШАГ 2: Скачать dataset_fire_smoke.zip с Яндекс.Диска ===
y = yadisk.YaDisk()
public_key = "https://disk.yandex.ru/d/_GkMswJZaPtqvg"
y.download_public(public_key, "dataset_fire_smoke.zip")

# === ШАГ 3: Распаковать dataset_fire_smoke.zip ===
with zipfile.ZipFile("dataset_fire_smoke.zip", 'r') as zip_ref:
    zip_ref.extractall("dataset_fire_smoke")

# === ШАГ 4: Распаковать вложенные архивы ===
with zipfile.ZipFile("dataset_fire_smoke/475_fire_train.zip", 'r') as zip_ref:
    zip_ref.extractall("475_fire_train")

with zipfile.ZipFile("dataset_fire_smoke/474_fire_val.zip", 'r') as zip_ref:
    zip_ref.extractall("474_fire_val")

# === ШАГ 5: Создать папки для обучения ===
for subset in ['train', 'val']:
    for cls in ['fire', 'smoke', 'normal']:
        os.makedirs(f"data/{subset}/{cls}", exist_ok=True)

# === ШАГ 6: Функция для сортировки изображений ===
def move_images(source_folder, target_base_folder):
    for fname in os.listdir(source_folder):
        if not fname.lower().endswith(('.jpg', '.jpeg', '.png')):
            continue
        src = os.path.join(source_folder, fname)
        if fname.startswith("fire"):
            dst = os.path.join(target_base_folder, "fire", fname)
        elif fname.startswith("sm_"):
            dst = os.path.join(target_base_folder, "smoke", fname)
        else:
            dst = os.path.join(target_base_folder, "normal", fname)
        shutil.copy(src, dst)

# === ШАГ 7: Разложить изображения по папкам ===
move_images("475_fire_train/images/train", "data/train")
move_images("474_fire_val/images/val", "data/val")

# === ШАГ 8: Создать генераторы данных ===
img_size = (128, 128)

datagen = ImageDataGenerator(rescale=1./255)

train_gen = datagen.flow_from_directory(
    "data/train",
    target_size=img_size,
    batch_size=32,
    class_mode='categorical'
)

val_gen = datagen.flow_from_directory(
    "data/val",
    target_size=img_size,
    batch_size=32,
    class_mode='categorical'
)

# === ШАГ 9: Простая CNN-модель ===
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D(2, 2),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(3, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
# === ШАГ 10: Обучение модели ===
history = model.fit(train_gen, epochs=15, validation_data=val_gen)

# === ШАГ 11: Сохраняем модель ===
model.save("fire_smoke_model.h5")
print("Модель обучена и сохранена!")

from sklearn.metrics import classification_report, average_precision_score, precision_score, recall_score
import numpy as np

# Предсказания модели
val_gen.reset()
y_pred = model.predict(val_gen, verbose=1)
y_pred_classes = np.argmax(y_pred, axis=1)

# Истинные метки
y_true = val_gen.classes
class_labels = list(val_gen.class_indices.keys())

# Краткий отчёт
print("=== Classification Report ===")
print(classification_report(y_true, y_pred_classes, target_names=class_labels))

# Precision, Recall (в среднем по классам)
precision = precision_score(y_true, y_pred_classes, average='macro')
recall = recall_score(y_true, y_pred_classes, average='macro')

print(f"Macro Precision: {precision:.4f}")
print(f"Macro Recall: {recall:.4f}")

import pandas as pd
from sklearn.metrics import classification_report, precision_score, recall_score, average_precision_score
from sklearn.preprocessing import label_binarize
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# === Получаем предсказания ===
val_gen.reset()
y_pred = model.predict(val_gen, verbose=1)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = val_gen.classes
class_labels = list(val_gen.class_indices.keys())

# === Табличка с Precision, Recall, F1 ===
print("=== Classification Report ===")
report = classification_report(y_true, y_pred_classes, target_names=class_labels, output_dict=True)
print(classification_report(y_true, y_pred_classes, target_names=class_labels))

# === Визуализация ===
plt.figure(figsize=(8, 4))
sns.heatmap(
    pd.DataFrame(report).iloc[:-1, :].T,
    annot=True, fmt=".2f", cmap="Blues"
)
plt.title("Precision / Recall / F1 per class")
plt.show()

# === Средние значения ===
precision = precision_score(y_true, y_pred_classes, average='macro')
recall = recall_score(y_true, y_pred_classes, average='macro')

print(f"\nMacro Precision: {precision:.4f}")
print(f"Macro Recall:    {recall:.4f}")

# === mAP (approximate using average precision per class) ===
y_true_bin = label_binarize(y_true, classes=[0, 1, 2])
mAP = average_precision_score(y_true_bin, y_pred, average="macro")

print(f"\nApproximate mAP@50: {mAP:.4f}")

import shutil
from tqdm import tqdm

def classify_and_sort(source_folder, target_folder):
    os.makedirs(target_folder, exist_ok=True)
    for cls in ['fire', 'smoke', 'normal']:
        os.makedirs(os.path.join(target_folder, cls), exist_ok=True)

    for fname in tqdm(os.listdir(source_folder), desc="Классификация изображений"):
        if not fname.lower().endswith(('.jpg', '.jpeg', '.png')):
            continue

        img_path = os.path.join(source_folder, fname)
        try:
            feat = extract_features(img_path)
            pred = classifier.predict(np.expand_dims(feat, axis=0))
            class_idx = np.argmax(pred)
            class_name = list(label_map.keys())[list(label_map.values()).index(class_idx)]

            dst_path = os.path.join(target_folder, class_name, fname)
            shutil.copy(img_path, dst_path)
        except:
            continue

import time
import os

# === Запуск таймера ===
start_time = time.time()

# Классификация и сортировка изображений
classify_and_sort("475_fire_train/images/train", "data_resorted/train")

# === Конец таймера ===
end_time = time.time()
elapsed_time = end_time - start_time

# Подсчёт количества изображений
num_files = len([
    f for f in os.listdir("475_fire_train/images/train")
    if f.lower().endswith(('.jpg', '.jpeg', '.png'))
])

# === Вывод времени ===
print(f"\nВремя выполнения: {elapsed_time:.2f} секунд")
print(f"Среднее время на изображение: {elapsed_time / num_files:.4f} сек")




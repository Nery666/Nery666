{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO/gzhsrJyrypKKVnUhrIbQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Nery666/Nery666/blob/main/%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C%20%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%BE%D0%B3%D0%BD%D1%8F%20%D0%B8%20%D0%B4%D1%8B%D0%BC%D0%B0%20%D0%BD%D0%B0%20%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B8.\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q yadisk\n",
        "\n",
        "import yadisk, zipfile, os, shutil\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras import layers, models\n",
        "from PIL import Image\n",
        "\n",
        "# === ШАГ 2: Скачать dataset_fire_smoke.zip с Яндекс.Диска ===\n",
        "y = yadisk.YaDisk()\n",
        "public_key = \"https://disk.yandex.ru/d/_GkMswJZaPtqvg\"\n",
        "y.download_public(public_key, \"dataset_fire_smoke.zip\")\n",
        "\n",
        "# === ШАГ 3: Распаковать dataset_fire_smoke.zip ===\n",
        "with zipfile.ZipFile(\"dataset_fire_smoke.zip\", 'r') as zip_ref:\n",
        "    zip_ref.extractall(\"dataset_fire_smoke\")\n",
        "\n",
        "# === ШАГ 4: Распаковать вложенные архивы ===\n",
        "with zipfile.ZipFile(\"dataset_fire_smoke/475_fire_train.zip\", 'r') as zip_ref:\n",
        "    zip_ref.extractall(\"475_fire_train\")\n",
        "\n",
        "with zipfile.ZipFile(\"dataset_fire_smoke/474_fire_val.zip\", 'r') as zip_ref:\n",
        "    zip_ref.extractall(\"474_fire_val\")\n",
        "\n",
        "# === ШАГ 5: Создать папки для обучения ===\n",
        "for subset in ['train', 'val']:\n",
        "    for cls in ['fire', 'smoke', 'normal']:\n",
        "        os.makedirs(f\"data/{subset}/{cls}\", exist_ok=True)\n",
        "\n",
        "# === ШАГ 6: Функция для сортировки изображений ===\n",
        "def move_images(source_folder, target_base_folder):\n",
        "    for fname in os.listdir(source_folder):\n",
        "        if not fname.lower().endswith(('.jpg', '.jpeg', '.png')):\n",
        "            continue\n",
        "        src = os.path.join(source_folder, fname)\n",
        "        if fname.startswith(\"fire\"):\n",
        "            dst = os.path.join(target_base_folder, \"fire\", fname)\n",
        "        elif fname.startswith(\"sm_\"):\n",
        "            dst = os.path.join(target_base_folder, \"smoke\", fname)\n",
        "        else:\n",
        "            dst = os.path.join(target_base_folder, \"normal\", fname)\n",
        "        shutil.copy(src, dst)\n",
        "\n",
        "# === ШАГ 7: Разложить изображения по папкам ===\n",
        "move_images(\"475_fire_train/images/train\", \"data/train\")\n",
        "move_images(\"474_fire_val/images/val\", \"data/val\")\n",
        "\n",
        "# === ШАГ 8: Создать генераторы данных ===\n",
        "img_size = (128, 128)\n",
        "\n",
        "datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_gen = datagen.flow_from_directory(\n",
        "    \"data/train\",\n",
        "    target_size=img_size,\n",
        "    batch_size=32,\n",
        "    class_mode='categorical'\n",
        ")\n",
        "\n",
        "val_gen = datagen.flow_from_directory(\n",
        "    \"data/val\",\n",
        "    target_size=img_size,\n",
        "    batch_size=32,\n",
        "    class_mode='categorical'\n",
        ")\n",
        "\n",
        "# === ШАГ 9: Простая CNN-модель ===\n",
        "model = models.Sequential([\n",
        "    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),\n",
        "    layers.MaxPooling2D(2, 2),\n",
        "    layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "    layers.MaxPooling2D(2, 2),\n",
        "    layers.Flatten(),\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(3, activation='softmax')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "# === ШАГ 10: Обучение модели ===\n",
        "history = model.fit(train_gen, epochs=15, validation_data=val_gen)\n",
        "\n",
        "# === ШАГ 11: Сохраняем модель ===\n",
        "model.save(\"fire_smoke_model.h5\")\n",
        "print(\"Модель обучена и сохранена!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R2dQXq0VuQfZ",
        "outputId": "58b608b2-dd77-49e9-a0b7-de5cd3d7efde"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 1142 images belonging to 3 classes.\n",
            "Found 308 images belonging to 3 classes.\n",
            "Epoch 1/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m51s\u001b[0m 1s/step - accuracy: 0.6012 - loss: 1.2222 - val_accuracy: 0.8506 - val_loss: 0.4558\n",
            "Epoch 2/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 1s/step - accuracy: 0.8162 - loss: 0.5240 - val_accuracy: 0.8474 - val_loss: 0.3491\n",
            "Epoch 3/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 969ms/step - accuracy: 0.8311 - loss: 0.4019 - val_accuracy: 0.8864 - val_loss: 0.2853\n",
            "Epoch 4/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 1s/step - accuracy: 0.8839 - loss: 0.2875 - val_accuracy: 0.8442 - val_loss: 0.3448\n",
            "Epoch 5/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 1s/step - accuracy: 0.9429 - loss: 0.2058 - val_accuracy: 0.8182 - val_loss: 0.4073\n",
            "Epoch 6/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 1s/step - accuracy: 0.9617 - loss: 0.1122 - val_accuracy: 0.8734 - val_loss: 0.3589\n",
            "Epoch 7/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 995ms/step - accuracy: 0.9774 - loss: 0.0806 - val_accuracy: 0.8701 - val_loss: 0.4161\n",
            "Epoch 8/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 976ms/step - accuracy: 0.9872 - loss: 0.0428 - val_accuracy: 0.8929 - val_loss: 0.4089\n",
            "Epoch 9/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 1000ms/step - accuracy: 0.9895 - loss: 0.0397 - val_accuracy: 0.8084 - val_loss: 0.5746\n",
            "Epoch 10/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 1s/step - accuracy: 0.9948 - loss: 0.0213 - val_accuracy: 0.8377 - val_loss: 0.4994\n",
            "Epoch 11/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 1s/step - accuracy: 0.9990 - loss: 0.0096 - val_accuracy: 0.8669 - val_loss: 0.5326\n",
            "Epoch 12/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 972ms/step - accuracy: 0.9980 - loss: 0.0080 - val_accuracy: 0.8701 - val_loss: 0.4953\n",
            "Epoch 13/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 1s/step - accuracy: 0.9998 - loss: 0.0068 - val_accuracy: 0.7955 - val_loss: 0.7680\n",
            "Epoch 14/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 995ms/step - accuracy: 0.9993 - loss: 0.0080 - val_accuracy: 0.8019 - val_loss: 0.8578\n",
            "Epoch 15/15\n",
            "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 967ms/step - accuracy: 1.0000 - loss: 0.0085 - val_accuracy: 0.8701 - val_loss: 0.5715\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Модель обучена и сохранена!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report, average_precision_score, precision_score, recall_score\n",
        "import numpy as np\n",
        "\n",
        "# Предсказания модели\n",
        "val_gen.reset()\n",
        "y_pred = model.predict(val_gen, verbose=1)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "\n",
        "# Истинные метки\n",
        "y_true = val_gen.classes\n",
        "class_labels = list(val_gen.class_indices.keys())\n",
        "\n",
        "# Краткий отчёт\n",
        "print(\"=== Classification Report ===\")\n",
        "print(classification_report(y_true, y_pred_classes, target_names=class_labels))\n",
        "\n",
        "# Precision, Recall (в среднем по классам)\n",
        "precision = precision_score(y_true, y_pred_classes, average='macro')\n",
        "recall = recall_score(y_true, y_pred_classes, average='macro')\n",
        "\n",
        "print(f\"Macro Precision: {precision:.4f}\")\n",
        "print(f\"Macro Recall: {recall:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ghfgdNXUw8cw",
        "outputId": "ccff0934-2c26-43c7-9d49-403b6020adf8"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 596ms/step\n",
            "=== Classification Report ===\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        fire       0.00      0.00      0.00         2\n",
            "      normal       0.88      0.88      0.88       270\n",
            "       smoke       0.11      0.11      0.11        36\n",
            "\n",
            "    accuracy                           0.79       308\n",
            "   macro avg       0.33      0.33      0.33       308\n",
            "weighted avg       0.78      0.79      0.78       308\n",
            "\n",
            "Macro Precision: 0.3298\n",
            "Macro Recall: 0.3309\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.metrics import classification_report, precision_score, recall_score, average_precision_score\n",
        "from sklearn.preprocessing import label_binarize\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# === Получаем предсказания ===\n",
        "val_gen.reset()\n",
        "y_pred = model.predict(val_gen, verbose=1)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "y_true = val_gen.classes\n",
        "class_labels = list(val_gen.class_indices.keys())\n",
        "\n",
        "# === Табличка с Precision, Recall, F1 ===\n",
        "print(\"=== Classification Report ===\")\n",
        "report = classification_report(y_true, y_pred_classes, target_names=class_labels, output_dict=True)\n",
        "print(classification_report(y_true, y_pred_classes, target_names=class_labels))\n",
        "\n",
        "# === Визуализация ===\n",
        "plt.figure(figsize=(8, 4))\n",
        "sns.heatmap(\n",
        "    pd.DataFrame(report).iloc[:-1, :].T,\n",
        "    annot=True, fmt=\".2f\", cmap=\"Blues\"\n",
        ")\n",
        "plt.title(\"Precision / Recall / F1 per class\")\n",
        "plt.show()\n",
        "\n",
        "# === Средние значения ===\n",
        "precision = precision_score(y_true, y_pred_classes, average='macro')\n",
        "recall = recall_score(y_true, y_pred_classes, average='macro')\n",
        "\n",
        "print(f\"\\nMacro Precision: {precision:.4f}\")\n",
        "print(f\"Macro Recall:    {recall:.4f}\")\n",
        "\n",
        "# === mAP (approximate using average precision per class) ===\n",
        "y_true_bin = label_binarize(y_true, classes=[0, 1, 2])\n",
        "mAP = average_precision_score(y_true_bin, y_pred, average=\"macro\")\n",
        "\n",
        "print(f\"\\nApproximate mAP@50: {mAP:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "id": "gLyprOlGxf0q",
        "outputId": "deb7beb5-64fa-4390-f955-b31939e08d66"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 471ms/step\n",
            "=== Classification Report ===\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        fire       0.00      0.00      0.00         2\n",
            "      normal       0.87      0.88      0.87       270\n",
            "       smoke       0.06      0.06      0.06        36\n",
            "\n",
            "    accuracy                           0.78       308\n",
            "   macro avg       0.31      0.31      0.31       308\n",
            "weighted avg       0.77      0.78      0.77       308\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Macro Precision: 0.3095\n",
            "Macro Recall:    0.3111\n",
            "\n",
            "Approximate mAP@50: 0.3354\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil\n",
        "from tqdm import tqdm\n",
        "\n",
        "def classify_and_sort(source_folder, target_folder):\n",
        "    os.makedirs(target_folder, exist_ok=True)\n",
        "    for cls in ['fire', 'smoke', 'normal']:\n",
        "        os.makedirs(os.path.join(target_folder, cls), exist_ok=True)\n",
        "\n",
        "    for fname in tqdm(os.listdir(source_folder), desc=\"Классификация изображений\"):\n",
        "        if not fname.lower().endswith(('.jpg', '.jpeg', '.png')):\n",
        "            continue\n",
        "\n",
        "        img_path = os.path.join(source_folder, fname)\n",
        "        try:\n",
        "            feat = extract_features(img_path)\n",
        "            pred = classifier.predict(np.expand_dims(feat, axis=0))\n",
        "            class_idx = np.argmax(pred)\n",
        "            class_name = list(label_map.keys())[list(label_map.values()).index(class_idx)]\n",
        "\n",
        "            dst_path = os.path.join(target_folder, class_name, fname)\n",
        "            shutil.copy(img_path, dst_path)\n",
        "        except:\n",
        "            continue"
      ],
      "metadata": {
        "id": "yLnF8rdT7OkH"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "import os\n",
        "\n",
        "# === Запуск таймера ===\n",
        "start_time = time.time()\n",
        "\n",
        "# Классификация и сортировка изображений\n",
        "classify_and_sort(\"475_fire_train/images/train\", \"data_resorted/train\")\n",
        "\n",
        "# === Конец таймера ===\n",
        "end_time = time.time()\n",
        "elapsed_time = end_time - start_time\n",
        "\n",
        "# Подсчёт количества изображений\n",
        "num_files = len([\n",
        "    f for f in os.listdir(\"475_fire_train/images/train\")\n",
        "    if f.lower().endswith(('.jpg', '.jpeg', '.png'))\n",
        "])\n",
        "\n",
        "# === Вывод времени ===\n",
        "print(f\"\\nВремя выполнения: {elapsed_time:.2f} секунд\")\n",
        "print(f\"Среднее время на изображение: {elapsed_time / num_files:.4f} сек\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iPmThARW7BMf",
        "outputId": "e13648bd-e354-4b0a-e7fc-d993aa4daff0"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Классификация изображений: 100%|██████████| 1142/1142 [00:00<00:00, 274728.72it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Время выполнения: 0.01 секунд\n",
            "Среднее время на изображение: 0.0000 сек\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    }
  ]
}